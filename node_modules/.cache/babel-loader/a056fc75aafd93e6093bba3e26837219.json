{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROGRAMING\\\\HTML CSS  JAVA SCRIPT\\\\5_ReactJS\\\\5_JSX_Atributes_VS_HTML_Atributes_IN_ReactJS\\\\reactapp\\\\src\\\\index.js\";\n//          JSX ATRIBUTES VS HTML ATTRIBUTES IN REACT         \\\\\n\n/*\n        HTML Attributes :\n              HTML attributes are special words used inside the opening tag to control the element's behaviour.\n               HTML attributes are a modifier of an HTML element type.\n                For Example :\n                  <h1 href=\"#\" contenteditable=\"true\"> </h1>\n                    // In Above Example 'href' & 'contenteditable' is Called Attributs.\n        \n        JSX Atributes :\n              JSX attributes is same as Special words used inside the opening tag of a Element,\n               But in JSX these words Called JSX Attributes insted of HTML attributes.\n                For Example :\n                    ReactDOM.render( <h1 href=\"#\" contentEditable=\"true\"> </h1>.........\n                      // In Above Example 'href' & 'contentEditable' is Called JSX Attributs.\n                          ***** In JSX Elements Attributes is written in camelCase. \n                                  & mostely the HTML Attributes is written in kebab-case.\n*/\n// Importing Required Modules :\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nvar name = \"Jarviz\";\nvar profession = \"Artificial Intelligence\"; // Rendering :\n\nReactDOM.render( /*#__PURE__*/React.createElement(React.Fragment, null, \"// contentEditable Attribute makes the given elemnt EditAble.\", /*#__PURE__*/React.createElement(\"h1\", {\n  contentEditable: \"true\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 3\n  }\n}, \"This Element is EditAble.\"), /*#__PURE__*/React.createElement(\"a\", {\n  href: \"https://google.com\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 3\n  }\n}, \"Got TO Google.\"), /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 3\n  }\n}, \"The Expression is used in the JSX without Curly Brackets , The Sum of 5 & 10 = 5 + 10 \")), document.getElementById('root'));\nReactDOM.render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }\n}, \"Hellow , The Variable is Added in the JSX WITH Curly Brackets = \", name, \".\"), /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 3\n  }\n}, \"The Expression is used in the JSX WITH Curly Brackets , The Sum of 5 & 10 = \", 5 + 10, \". \")), document.getElementById('root2'));\nReactDOM.render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 3\n  }\n}, \"Hellow , The multiple Variables is Added in the JSX WITH More Curly Brackets = \", name, \" is a \", profession, \".\"), /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 3\n  }\n}, \"The multiple Expression is used in the JSX WITH Single Curly Brackets , The Sum of 5 + 10 & 3 x 15  = \", 5 + 10 + \",\" + 3 * 15, \".\")), document.getElementById('root3'));\nReactDOM.render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 3\n  }\n}, \"With The Help of Template Literals :\"), /*#__PURE__*/React.createElement(\"h3\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 3\n  }\n}, `Hellow , My 'assitant' Name is ${name} & is a ${profession}`, \" & \", `3 + 5 = ${3 + 5}`, \".\"), /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 3\n  }\n}, `Hellow , My 'assitant' Name is ${name} & is a ${profession} & 3 * 10 = ${3 * 10}`, \".\")), document.getElementById('root4')); //                END                 \\\\","map":{"version":3,"sources":["E:/PROGRAMING/HTML CSS  JAVA SCRIPT/5_ReactJS/5_JSX_Atributes_VS_HTML_Atributes_IN_ReactJS/reactapp/src/index.js"],"names":["React","ReactDOM","name","profession","render","document","getElementById"],"mappings":";AAAA;;AAEA;;;;;;;;;;;;;;;;;AAiBI;AACJ,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEE,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,UAAU,GAAG,yBAAjB,C,CAEE;;AAEJF,QAAQ,CAACG,MAAT,eACE,wHAEA;AAAI,EAAA,eAAe,EAAC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAFA,eAGA;AAAG,EAAA,IAAI,EAAC,oBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHA,eAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4FAJA,CADF,EAOEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAPF;AAUAL,QAAQ,CAACG,MAAT,eACE,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uEAAqEF,IAArE,MADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFAAgF,IAAI,EAApF,OAFA,CADF,EAKEG,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CALF;AASAL,QAAQ,CAACG,MAAT,eACE,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFAAoFF,IAApF,YAAgGC,UAAhG,MADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6GAA2G,IAAI,EAAL,GAAW,GAAX,GAAkB,IAAI,EAAhI,MAFA,CADF,EAKEE,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CALF;AAUAL,QAAQ,CAACG,MAAT,eACE,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAO,kCAAiCF,IAAK,WAAUC,UAAW,EAAlE,SAA2E,WAAU,IAAE,CAAE,EAAzF,MAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAM,kCAAiCD,IAAK,WAAUC,UAAW,eAAc,IAAE,EAAG,EAApF,MAHA,CADF,EAMEE,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CANF,E,CAWoB","sourcesContent":["//          JSX ATRIBUTES VS HTML ATTRIBUTES IN REACT         \\\\\n\n/*\n        HTML Attributes :\n              HTML attributes are special words used inside the opening tag to control the element's behaviour.\n               HTML attributes are a modifier of an HTML element type.\n                For Example :\n                  <h1 href=\"#\" contenteditable=\"true\"> </h1>\n                    // In Above Example 'href' & 'contenteditable' is Called Attributs.\n        \n        JSX Atributes :\n              JSX attributes is same as Special words used inside the opening tag of a Element,\n               But in JSX these words Called JSX Attributes insted of HTML attributes.\n                For Example :\n                    ReactDOM.render( <h1 href=\"#\" contentEditable=\"true\"> </h1>.........\n                      // In Above Example 'href' & 'contentEditable' is Called JSX Attributs.\n                          ***** In JSX Elements Attributes is written in camelCase. \n                                  & mostely the HTML Attributes is written in kebab-case.\n*/\n    // Importing Required Modules :\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n  var name = \"Jarviz\";\n  var profession = \"Artificial Intelligence\";\n\n    // Rendering :\n      \nReactDOM.render(\n  <>  \n      // contentEditable Attribute makes the given elemnt EditAble.\n  <h1 contentEditable=\"true\">This Element is EditAble.</h1>\n  <a href=\"https://google.com\">Got TO Google.</a> \n  <p>The Expression is used in the JSX without Curly Brackets , The Sum of 5 & 10 = 5 + 10 </p>\n  </>,\n  document.getElementById('root')\n);\n             \nReactDOM.render(\n  <>\n  <h3>Hellow , The Variable is Added in the JSX WITH Curly Brackets = {name}.</h3> \n  <p>The Expression is used in the JSX WITH Curly Brackets , The Sum of 5 & 10 = {5 + 10}. </p>\n  </>,\n  document.getElementById('root2')\n);\n \n\nReactDOM.render(\n  <>\n  <h3>Hellow , The multiple Variables is Added in the JSX WITH More Curly Brackets = {name} is a {profession}.</h3> \n  <p>The multiple Expression is used in the JSX WITH Single Curly Brackets , The Sum of 5 + 10 & 3 x 15  = {(5 + 10) + \",\" + (3 * 15)}.</p>\n  </>,\n  document.getElementById('root3')\n);\n\n\n\nReactDOM.render(\n  <>\n  <h1>With The Help of Template Literals :</h1>\n  <h3>{ `Hellow , My 'assitant' Name is ${name} & is a ${profession}` } & { `3 + 5 = ${3+5}` }.</h3> \n  <p>{ `Hellow , My 'assitant' Name is ${name} & is a ${profession} & 3 * 10 = ${3*10}` }.</p>\n  </>,\n  document.getElementById('root4')\n);\n\n \n            \n                    //                END                 \\\\"]},"metadata":{},"sourceType":"module"}