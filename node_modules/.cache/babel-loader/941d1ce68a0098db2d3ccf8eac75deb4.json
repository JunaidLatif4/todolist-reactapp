{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROGRAMING\\\\HTML CSS  JAVA SCRIPT\\\\5_ReactJS\\\\Practice\\\\reactapp\\\\src\\\\App.jsx\";\n//                  COMPILING ALL COMPONENTS IN THIS COMPONENT                  \\\\\n\n/*\r\n            DEFINE FORM IN REACT.JS :\r\n                    HTML form elements work a little bit differently from other DOM elements in React,\r\n                     because form elements naturally keep some internal state.\r\n                      The default HTML form behavior of browsing to a new page when the user submits the form.\r\n                       If you want this behavior in React, it just works.\r\n                        But in most cases, it’s convenient to have a JavaScript function that handles the submission of the form and has access to the data that the user entered into the form.\r\n                         The standard way to achieve this is with a technique called “controlled components”.\r\n\r\n                Controlled Components :\r\n                        In HTML, form elements such as <input>, <textarea>, and <select> typically maintain their own state and update it based on user input.\r\n                         In React, mutable state is typically kept in the state property of components, and only updated with setState().\r\n*/\n// Importing Requried Modules :\nimport React from 'react'; // Importing Hooks's Hodule (UseState) :\n\nimport { useState } from 'react'; // Importing Components ;\n\nimport FormStateObject from './Form1'; // Imorting CSS :\n\nimport './index.css'; // Creating the App Component :\n\nconst App = () => {\n  // Rendring :\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormStateObject, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  })));\n}; // Exporting App Component :\n\n\nexport default App;","map":{"version":3,"sources":["E:/PROGRAMING/HTML CSS  JAVA SCRIPT/5_ReactJS/Practice/reactapp/src/App.jsx"],"names":["React","useState","FormStateObject","App"],"mappings":";AAAA;;AACA;;;;;;;;;;;;;AAeI;AACJ,OAAOA,KAAP,MAAkB,OAAlB,C,CACI;;AACJ,SAASC,QAAT,QAAyB,OAAzB,C,CAEI;;AACJ,OAAOC,eAAP,MAA4B,SAA5B,C,CAEI;;AACJ,OAAO,aAAP,C,CAIA;;AACA,MAAMC,GAAG,GAAG,MAAM;AAEd;AACA,sBACI,uDACI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADJ,CADJ;AAOH,CAVD,C,CAcQ;;;AACR,eAAeA,GAAf","sourcesContent":["//                  COMPILING ALL COMPONENTS IN THIS COMPONENT                  \\\\\r\n/*\r\n            DEFINE FORM IN REACT.JS :\r\n                    HTML form elements work a little bit differently from other DOM elements in React,\r\n                     because form elements naturally keep some internal state.\r\n                      The default HTML form behavior of browsing to a new page when the user submits the form.\r\n                       If you want this behavior in React, it just works.\r\n                        But in most cases, it’s convenient to have a JavaScript function that handles the submission of the form and has access to the data that the user entered into the form.\r\n                         The standard way to achieve this is with a technique called “controlled components”.\r\n\r\n                Controlled Components :\r\n                        In HTML, form elements such as <input>, <textarea>, and <select> typically maintain their own state and update it based on user input.\r\n                         In React, mutable state is typically kept in the state property of components, and only updated with setState().\r\n*/\r\n\r\n\r\n    // Importing Requried Modules :\r\nimport React from 'react';\r\n    // Importing Hooks's Hodule (UseState) :\r\nimport { useState } from 'react';\r\n\r\n    // Importing Components ;\r\nimport FormStateObject from './Form1';\r\n\r\n    // Imorting CSS :\r\nimport './index.css'\r\n\r\n\r\n\r\n// Creating the App Component :\r\nconst App = () => {\r\n        \r\n    // Rendring :\r\n    return (\r\n        <>\r\n            <div className=\"border\">\r\n            <FormStateObject/>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\n\r\n\r\n        // Exporting App Component :\r\nexport default App;"]},"metadata":{},"sourceType":"module"}