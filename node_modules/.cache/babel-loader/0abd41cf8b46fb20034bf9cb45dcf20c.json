{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROGRAMING\\\\HTML CSS  JAVA SCRIPT\\\\5_ReactJS\\\\4_JSX_Expractions_IN_ReactJS\\\\reactapp\\\\src\\\\index.js\";\n//          JSX EXPRESSION IN REACT         \\\\\n\n/*\n      Rendering Variable OR Expressions in the JSX :\n            To rander a Variable/Expression in the JSX Element we use the Curly Brackets '{}'.\n              Put the Variable/Expression in the Curly Brackets '{}' within the JSX Element to Render it. \n*/\n// Importing Required Modules :\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nvar name = \"Jarviz\";\nvar profession = \"Artificial Intelligence\"; // Rendering :\n// Add Variable/Expression without Curly '{}' Brackets :\n\nReactDOM.render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }\n}, \"Var name = \\\"Jarviz\\\";\"), /*#__PURE__*/React.createElement(\"h3\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 3\n  }\n}, \"Hellow , The Variable is Added in the JSX without Curly Brackets = name.\"), /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 3\n  }\n}, \"The Expression is used in the JSX without Curly Brackets , The Sum of 5 & 10 = 5 + 10 \")), document.getElementById('root')); // This will through Error because the Variable OR Expression is not in the Cruly Brackets.\n// Add Variable/Expression WITH Curly '{}' Brackets :\n\nReactDOM.render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 3\n  }\n}, \"Hellow , The Variable is Added in the JSX WITH Curly Brackets = \", name, \".\"), /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 3\n  }\n}, \"The Expression is used in the JSX WITH Curly Brackets , The Sum of 5 & 10 = \", 5 + 10, \". \")), document.getElementById('root2')); // This is the Correct way to Use Expressions / Variables in the JSX.\n// *** We Use only Expressions or Variable in this Way , We can't us Statements or Cunditions in this Way.\n// If We Write Conditions or Statements in the Cruly '{}' barackets within JSX , then it'll gives Error.\n\n/*\n        Adding More then one Variables/Expressions in a Single JSX Element :\n              If we want to add More then one Variables / Expressions then add every Variables/Expressions in seprate Curly '{}' brackets ,\n                OR erery Variables/Expressions in a single Curlt Bracket and Seprate them with Comma ',' or plus '+' Sign.\n                  AS : (Variables)\n                    <h1>Example No.1 = {x} {y} </h1>\n                    <h1>Example No.2 = {x + y} </h1>\n                      // In case of adding Space between them :\n                    <h1>Example No.3 = {x + \" \" + y} </h1>\n\n                  AS : (Expressions)\n                    <h1>Example No.1 = {1 + 2} {3*5} </h1>\n                    <h1>Example No.2 = {(1+2) + (3*5)} </h1>\n                      // In case of adding Space between them :\n                    <h1>Example No.3 = {(1+2) + \" \" + (3*5)} </h1>\n\n                  AS : (Expressions + Variables)\n                    <h1>Example No.1 = {(1+2) + \" \" + (x)} </h1>\n                    <h1>Example No.1 = {(1+2) + \" \" + (x + y)} </h1>\n                    <h1>Example No.1 = {(1+2) + \"Lorem\" + (x + y)} </h1>\n*/\n\nReactDOM.render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 3\n  }\n}, \"Hellow , The multiple Variables is Added in the JSX WITH More Curly Brackets = \", name, \" is a \", profession, \".\"), /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 3\n  }\n}, \"The multiple Expression is used in the JSX WITH Single Curly Brackets , The Sum of 5 + 10 & 3 x 15  = \", 5 + 10 + \",\" + 3 * 15, \".\")), document.getElementById('root3'));\n/*\n        Adding More then one Variables/Expressions in a Single JSX Element WITH Template LITERALS :\n                If we want to add More then one Variables / Expressions with template Literals use Backticks \" `` \" INCLOSED in a curly '{}' brackets .\n                  Use all the backTick Features in JSX Elements that we use in JavaScript.\n                    AS :\n                    <h1>Example No.1 = Hellow , My 'assitant' Name is { `${name} & is a ${profession}` }. </h1>\n                    <h1>Example No.2 = { `Hellow , My 'assitant' Name is ${name} & is a ${profession}` }. </h1>\n                    <h1>Example No.3 = { `Hellow , My 'assitant' Name is ${name} & is a ${profession}` } & { `3 + 5 = ${3+5}` }.</h1>\n                    <h1>Example No.4 = { `Hellow , My 'assitant' Name is ${name} & is a ${profession} & 3 + 5 = ${3+5}` }.</h1>\n*/\n\nReactDOM.render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 3\n  }\n}, \"With The Help of Template Literals :\"), /*#__PURE__*/React.createElement(\"h3\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 3\n  }\n}, `Hellow , My 'assitant' Name is ${name} & is a ${profession}`, \" & \", `3 + 5 = ${3 + 5}`, \".\"), /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 3\n  }\n}, `Hellow , My 'assitant' Name is ${name} & is a ${profession} & 3 * 10 = ${3 * 10}`, \".\")), document.getElementById('root4')); // As For use the JavaScript in the JSX Element must use Curly Bracketrs '{}' , \n// As for use the BackTick \"``\" JavaScript Functionality we Must Inclosed the backTick data in the Curly Brackets.\n//                END                 \\\\","map":{"version":3,"sources":["E:/PROGRAMING/HTML CSS  JAVA SCRIPT/5_ReactJS/4_JSX_Expractions_IN_ReactJS/reactapp/src/index.js"],"names":["React","ReactDOM","name","profession","render","document","getElementById"],"mappings":";AAAA;;AAEA;;;;;AAMI;AACJ,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEE,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,UAAU,GAAG,yBAAjB,C,CAEE;AACE;;AACNF,QAAQ,CAACG,MAAT,eACE,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8EAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4FAHA,CADF,EAMEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF,E,CAQoB;AAGd;;AACNL,QAAQ,CAACG,MAAT,eACE,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uEAAqEF,IAArE,MADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFAAgF,IAAI,EAApF,OAFA,CADF,EAKEG,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CALF,E,CAOM;AAEH;AACC;;AAIJ;;;;;;;;;;;;;;;;;;;;;;AAsBAL,QAAQ,CAACG,MAAT,eACE,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFAAoFF,IAApF,YAAgGC,UAAhG,MADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6GAA2G,IAAI,EAAL,GAAW,GAAX,GAAkB,IAAI,EAAhI,MAFA,CADF,EAKEE,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CALF;AAWA;;;;;;;;;;;AAWAL,QAAQ,CAACG,MAAT,eACE,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAO,kCAAiCF,IAAK,WAAUC,UAAW,EAAlE,SAA2E,WAAU,IAAE,CAAE,EAAzF,MAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAM,kCAAiCD,IAAK,WAAUC,UAAW,eAAc,IAAE,EAAG,EAApF,MAHA,CADF,EAMEE,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CANF,E,CAQU;AACE;AAGQ","sourcesContent":["//          JSX EXPRESSION IN REACT         \\\\\n\n/*\n      Rendering Variable OR Expressions in the JSX :\n            To rander a Variable/Expression in the JSX Element we use the Curly Brackets '{}'.\n              Put the Variable/Expression in the Curly Brackets '{}' within the JSX Element to Render it. \n*/\n\n    // Importing Required Modules :\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n  var name = \"Jarviz\";\n  var profession = \"Artificial Intelligence\";\n\n    // Rendering :\n      // Add Variable/Expression without Curly '{}' Brackets :\nReactDOM.render(\n  <>\n  <h1>Var name = \"Jarviz\";</h1>\n  <h3>Hellow , The Variable is Added in the JSX without Curly Brackets = name.</h3> \n  <p>The Expression is used in the JSX without Curly Brackets , The Sum of 5 & 10 = 5 + 10 </p>\n  </>,\n  document.getElementById('root')\n);\n                    // This will through Error because the Variable OR Expression is not in the Cruly Brackets.\n\n\n      // Add Variable/Expression WITH Curly '{}' Brackets :\nReactDOM.render(\n  <>\n  <h3>Hellow , The Variable is Added in the JSX WITH Curly Brackets = {name}.</h3> \n  <p>The Expression is used in the JSX WITH Curly Brackets , The Sum of 5 & 10 = {5 + 10}. </p>\n  </>,\n  document.getElementById('root2')\n);\n      // This is the Correct way to Use Expressions / Variables in the JSX.\n\n   // *** We Use only Expressions or Variable in this Way , We can't us Statements or Cunditions in this Way.\n    // If We Write Conditions or Statements in the Cruly '{}' barackets within JSX , then it'll gives Error.\n\n\n\n/*\n        Adding More then one Variables/Expressions in a Single JSX Element :\n              If we want to add More then one Variables / Expressions then add every Variables/Expressions in seprate Curly '{}' brackets ,\n                OR erery Variables/Expressions in a single Curlt Bracket and Seprate them with Comma ',' or plus '+' Sign.\n                  AS : (Variables)\n                    <h1>Example No.1 = {x} {y} </h1>\n                    <h1>Example No.2 = {x + y} </h1>\n                      // In case of adding Space between them :\n                    <h1>Example No.3 = {x + \" \" + y} </h1>\n\n                  AS : (Expressions)\n                    <h1>Example No.1 = {1 + 2} {3*5} </h1>\n                    <h1>Example No.2 = {(1+2) + (3*5)} </h1>\n                      // In case of adding Space between them :\n                    <h1>Example No.3 = {(1+2) + \" \" + (3*5)} </h1>\n\n                  AS : (Expressions + Variables)\n                    <h1>Example No.1 = {(1+2) + \" \" + (x)} </h1>\n                    <h1>Example No.1 = {(1+2) + \" \" + (x + y)} </h1>\n                    <h1>Example No.1 = {(1+2) + \"Lorem\" + (x + y)} </h1>\n*/\n\nReactDOM.render(\n  <>\n  <h3>Hellow , The multiple Variables is Added in the JSX WITH More Curly Brackets = {name} is a {profession}.</h3> \n  <p>The multiple Expression is used in the JSX WITH Single Curly Brackets , The Sum of 5 + 10 & 3 x 15  = {(5 + 10) + \",\" + (3 * 15)}.</p>\n  </>,\n  document.getElementById('root3')\n);\n\n\n\n\n/*\n        Adding More then one Variables/Expressions in a Single JSX Element WITH Template LITERALS :\n                If we want to add More then one Variables / Expressions with template Literals use Backticks \" `` \" INCLOSED in a curly '{}' brackets .\n                  Use all the backTick Features in JSX Elements that we use in JavaScript.\n                    AS :\n                    <h1>Example No.1 = Hellow , My 'assitant' Name is { `${name} & is a ${profession}` }. </h1>\n                    <h1>Example No.2 = { `Hellow , My 'assitant' Name is ${name} & is a ${profession}` }. </h1>\n                    <h1>Example No.3 = { `Hellow , My 'assitant' Name is ${name} & is a ${profession}` } & { `3 + 5 = ${3+5}` }.</h1>\n                    <h1>Example No.4 = { `Hellow , My 'assitant' Name is ${name} & is a ${profession} & 3 + 5 = ${3+5}` }.</h1>\n*/\n\nReactDOM.render(\n  <>\n  <h1>With The Help of Template Literals :</h1>\n  <h3>{ `Hellow , My 'assitant' Name is ${name} & is a ${profession}` } & { `3 + 5 = ${3+5}` }.</h3> \n  <p>{ `Hellow , My 'assitant' Name is ${name} & is a ${profession} & 3 * 10 = ${3*10}` }.</p>\n  </>,\n  document.getElementById('root4')\n);\n          // As For use the JavaScript in the JSX Element must use Curly Bracketrs '{}' , \n            // As for use the BackTick \"``\" JavaScript Functionality we Must Inclosed the backTick data in the Curly Brackets.\n \n            \n                    //                END                 \\\\"]},"metadata":{},"sourceType":"module"}