{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROGRAMING\\\\HTML CSS  JAVA SCRIPT\\\\5_ReactJS\\\\Practice\\\\reactapp\\\\src\\\\CompA.jsx\";\n// Importing Modules ;\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n\nconst CompA = () => {\n  // Creating State :\n  const [num, updateNum] = useState(0); // Creating the UseEffect Hook :\n\n  /*\r\n          //*     CASE 1 : By default     *\\\\\r\n      useEffect( ()=>{\r\n          alert ('The Button is Clicked')\r\n      } )\r\n  \r\n          //*     CASE 2 : Empty Square Breackets '[]' at the End of the Function     *\\\\\r\n      useEffect( ()=>{\r\n          alert ('The Button is Clicked')\r\n      } , [])     // Now by potting the Empty Square bracket , the UseEffect hook only run one time when the page load.\r\n  */\n  //*     CASE 3 : Square Breackets having a variable '[x]' at the End of the Function     *\\\\\n\n  useEffect(() => {\n    alert('The Button is Clicked');\n  }, [num]); // Now by potting the given Variable in the Square bracket , the UseEffect hook only run when the Given variable's Value changed (That leads to update DOM).\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"div1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, \"When Ever the Butten is Clicked the UseEffect Hook is Run, as when we press the Butten The Value is changed .\", /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn\",\n    onClick: () => {\n      updateNum(num + 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, \" Click Me \", num, \" \")));\n}; // Exporting CompA :\n\n\nexport default CompA;","map":{"version":3,"sources":["E:/PROGRAMING/HTML CSS  JAVA SCRIPT/5_ReactJS/Practice/reactapp/src/CompA.jsx"],"names":["React","useEffect","useState","CompA","num","updateNum","alert"],"mappings":";AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,KAAK,GAAG,MAAI;AAEd;AACA,QAAM,CAACC,GAAD,EAAOC,SAAP,IAAoBH,QAAQ,CAAC,CAAD,CAAlC,CAHc,CAKd;;AACJ;;;;;;;;;;;AAWQ;;AACJD,EAAAA,SAAS,CAAE,MAAI;AACXK,IAAAA,KAAK,CAAE,uBAAF,CAAL;AACH,GAFQ,EAEL,CAACF,GAAD,CAFK,CAAT,CAlBc,CAoBC;;AAEf,sBACI,uDACI;AAAK,IAAA,SAAS,EAAG,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mIAEA;AAAQ,IAAA,SAAS,EAAG,KAApB;AAA0B,IAAA,OAAO,EAAK,MAAI;AAAEC,MAAAA,SAAS,CAACD,GAAG,GAAG,CAAP,CAAT;AAAoB,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA8EA,GAA9E,MAFA,CADJ,CADJ;AAQH,CA9BD,C,CAiCA;;;AACA,eAAeD,KAAf","sourcesContent":["\r\n// Importing Modules ;\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\n\r\nconst CompA = ()=>{\r\n\r\n    // Creating State :\r\n    const [num , updateNum] = useState(0)\r\n\r\n    // Creating the UseEffect Hook :\r\n/*\r\n        //*     CASE 1 : By default     *\\\\\r\n    useEffect( ()=>{\r\n        alert ('The Button is Clicked')\r\n    } )\r\n\r\n        //*     CASE 2 : Empty Square Breackets '[]' at the End of the Function     *\\\\\r\n    useEffect( ()=>{\r\n        alert ('The Button is Clicked')\r\n    } , [])     // Now by potting the Empty Square bracket , the UseEffect hook only run one time when the page load.\r\n*/\r\n        //*     CASE 3 : Square Breackets having a variable '[x]' at the End of the Function     *\\\\\r\n    useEffect( ()=>{\r\n        alert ('The Button is Clicked')\r\n    } , [num])     // Now by potting the given Variable in the Square bracket , the UseEffect hook only run when the Given variable's Value changed (That leads to update DOM).\r\n\r\n    return(\r\n        <>\r\n            <div className = \"div1\">\r\n                When Ever the Butten is Clicked the UseEffect Hook is Run, as when we press the Butten The Value is changed . \r\n            <button className = \"btn\" onClick = { ()=>{ updateNum(num + 1) } }> Click Me {num} </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n// Exporting CompA :\r\nexport default CompA;"]},"metadata":{},"sourceType":"module"}