{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROGRAMING\\\\HTML CSS  JAVA SCRIPT\\\\5_ReactJS\\\\Practice\\\\reactapp\\\\src\\\\Form2.jsx\";\n//                  CREATING FORM USING STATE AS A OBJECT WITH CONDITIONS             //\n\n/*\r\n            STATE As a Object :\r\n                    In order to make a Form that contain many Input tags , its difficult to handle the Form with the provious method that we studied in the privious Lectures.\r\n                        As it is hard to Manage the Large Code , So use the State as a Object .\r\n                * using State as a Object is very helpfull to make large Form contain many InputTages.\r\n                    For this Purpose us the Same 'oneChange' Function in all Tages & add 'name' Attribute to Distinguish them.\r\n                        AS :\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your Name\"\r\n                                name = \"fullName\"\r\n                                onChange={enteringData}\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your Password\"\r\n                                name = \"pass\"\r\n                                onChange={enteringData}\r\n                            />\r\n\r\n*/\nimport React from 'react';\nimport { useState } from 'react'; // Creating Form Component :\n\nconst Form = () => {\n  // Using Hook to Controle the Input Tags :\n  // Creating State As a Object\n  const [enterData, updateData] = useState({\n    // This the values of a name Attribute present in the InputTages.\n    fullName: \"\",\n    pass: \"\"\n  }); // Creating Data Control Function :\n\n  const enteringData = data => {\n    // This will print the Current Accessing InputTag\n    console.log(data.target.name); // The variable that Holds the Changed Value from the Given Tag.\n\n    const value = data.target.value; // The variable that Holds the Status of current Accessing Tag. \n\n    const name = data.target.name; // Storing the Comming Value  in the Hook's Object's Variable :\n\n    updateData(previousValue => {\n      // if the \n      if (name == \"fullName\") {\n        return {\n          fullName: value,\n          pass: previousValue.pass\n        };\n      } else if (name == \"pass\") {\n        return {\n          name: previousValue.name,\n          pass: value\n        };\n      }\n    });\n  }; // Creating a Function that Shows the Final EnteredData in DOM :\n\n\n  const [fullData, saveFullData] = useState();\n\n  const showSaveData = () => {\n    saveFullData(enterData.name); // It'll print the EnteredPassword in console when the Submit button is pressed  :\n\n    console.log(\"The Password = \" + enterData.pass); // OR :\n    // console.log(enterData)\n  }; // Preventing the page reloding while Submitting the Form :\n\n\n  const onFormSubmit = event => {\n    event.preventDefault();\n  }; // Redering :\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    style: {\n      color: \"green\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, \"COMPLETE FORM\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, \"Hi, \", /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }, \" \", fullData, \" \"), \" \"), /*#__PURE__*/React.createElement(\"form\", {\n    id: \"form2\",\n    onSubmit: onFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter your Name\",\n    name: \"fullName\",\n    onChange: enteringData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    placeholder: \"Enter your Password\",\n    name: \"pass\",\n    onChange: enteringData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit/Show\",\n    onClick: showSaveData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  })));\n}; // Exporting Component :\n\n\nexport default Form;","map":{"version":3,"sources":["E:/PROGRAMING/HTML CSS  JAVA SCRIPT/5_ReactJS/Practice/reactapp/src/Form2.jsx"],"names":["React","useState","Form","enterData","updateData","fullName","pass","enteringData","data","console","log","target","name","value","previousValue","fullData","saveFullData","showSaveData","onFormSubmit","event","preventDefault","color"],"mappings":";AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB,C,CAII;;AACJ,MAAMC,IAAI,GAAG,MAAM;AACX;AACI;AACR,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BH,QAAQ,CAAC;AACjC;AACJI,IAAAA,QAAQ,EAAG,EAF0B;AAGrCC,IAAAA,IAAI,EAAG;AAH8B,GAAD,CAAxC,CAHe,CAQX;;AACJ,QAAMC,YAAY,GAAIC,IAAD,IAAU;AACvB;AACJC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,MAAL,CAAYC,IAAxB,EAF2B,CAIvB;;AACJ,UAAMC,KAAK,GAAGL,IAAI,CAACG,MAAL,CAAYE,KAA1B,CAL2B,CAMvB;;AACJ,UAAMD,IAAI,GAAGJ,IAAI,CAACG,MAAL,CAAYC,IAAzB,CAP2B,CASvB;;AACJR,IAAAA,UAAU,CAAIU,aAAD,IAAiB;AACtB;AACJ,UAAIF,IAAI,IAAI,UAAZ,EAAuB;AACnB,eAAO;AACHP,UAAAA,QAAQ,EAAGQ,KADR;AAEHP,UAAAA,IAAI,EAAGQ,aAAa,CAACR;AAFlB,SAAP;AAIH,OALD,MAMK,IAAIM,IAAI,IAAI,MAAZ,EAAmB;AACpB,eAAM;AACFA,UAAAA,IAAI,EAAGE,aAAa,CAACF,IADnB;AAEFN,UAAAA,IAAI,EAAGO;AAFL,SAAN;AAIH;AACJ,KAdS,CAAV;AAeH,GAzBD,CATe,CAqCf;;;AACA,QAAM,CAACE,QAAD,EAAWC,YAAX,IAA2Bf,QAAQ,EAAzC;;AACA,QAAMgB,YAAY,GAAG,MAAM;AACvBD,IAAAA,YAAY,CAACb,SAAS,CAACS,IAAX,CAAZ,CADuB,CAEnB;;AACJH,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAoBP,SAAS,CAACG,IAA3C,EAHuB,CAInB;AACJ;AACH,GAND,CAvCe,CAgDX;;;AACJ,QAAMY,YAAY,GAAIC,KAAD,IAAU;AAC3BA,IAAAA,KAAK,CAACC,cAAN;AACH,GAFD,CAjDe,CAsDX;;;AACJ,sBACI,uDACI;AAAI,IAAA,KAAK,EAAK;AAACC,MAAAA,KAAK,EAAG;AAAT,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAQ;AAAM,IAAA,KAAK,EAAK;AAACA,MAAAA,KAAK,EAAG;AAAT,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAoCN,QAApC,MAAR,MAFJ,eAGI;AAAM,IAAA,EAAE,EAAC,OAAT;AAAiB,IAAA,QAAQ,EAAEG,YAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,WAAW,EAAC,iBAFhB;AAGI,IAAA,IAAI,EAAG,UAHX;AAII,IAAA,QAAQ,EAAEX,YAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAOI;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,WAAW,EAAC,qBAFhB;AAGI,IAAA,IAAI,EAAG,MAHX;AAII,IAAA,QAAQ,EAAEA,YAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,eAaI;AACI,IAAA,IAAI,EAAE,QADV;AAEI,IAAA,KAAK,EAAG,aAFZ;AAGI,IAAA,OAAO,EAAIU,YAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbJ,CAHJ,CADJ;AAyBH,CAhFD,C,CAoFA;;;AACA,eAAef,IAAf","sourcesContent":["//                  CREATING FORM USING STATE AS A OBJECT WITH CONDITIONS             //\r\n/*\r\n            STATE As a Object :\r\n                    In order to make a Form that contain many Input tags , its difficult to handle the Form with the provious method that we studied in the privious Lectures.\r\n                        As it is hard to Manage the Large Code , So use the State as a Object .\r\n                * using State as a Object is very helpfull to make large Form contain many InputTages.\r\n                    For this Purpose us the Same 'oneChange' Function in all Tages & add 'name' Attribute to Distinguish them.\r\n                        AS :\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your Name\"\r\n                                name = \"fullName\"\r\n                                onChange={enteringData}\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your Password\"\r\n                                name = \"pass\"\r\n                                onChange={enteringData}\r\n                            />\r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\n\r\n\r\n\r\n    // Creating Form Component :\r\nconst Form = () => {\r\n        // Using Hook to Controle the Input Tags :\r\n            // Creating State As a Object\r\n    const [enterData, updateData] = useState({\r\n            // This the values of a name Attribute present in the InputTages.\r\n        fullName : \"\",\r\n        pass : \"\"\r\n    })\r\n        // Creating Data Control Function :\r\n    const enteringData = (data) => {\r\n            // This will print the Current Accessing InputTag\r\n        console.log(data.target.name)\r\n\r\n            // The variable that Holds the Changed Value from the Given Tag.\r\n        const value = data.target.value;\r\n            // The variable that Holds the Status of current Accessing Tag. \r\n        const name = data.target.name;\r\n        \r\n            // Storing the Comming Value  in the Hook's Object's Variable :\r\n        updateData ( (previousValue)=>{\r\n                // if the \r\n            if (name == \"fullName\"){\r\n                return {\r\n                    fullName : value,\r\n                    pass : previousValue.pass\r\n                };\r\n            }\r\n            else if (name == \"pass\"){\r\n                return{\r\n                    name : previousValue.name,\r\n                    pass : value\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    // Creating a Function that Shows the Final EnteredData in DOM :\r\n    const [fullData, saveFullData] = useState();\r\n    const showSaveData = () => {\r\n        saveFullData(enterData.name);\r\n            // It'll print the EnteredPassword in console when the Submit button is pressed  :\r\n        console.log( \"The Password = \" + enterData.pass)\r\n            // OR :\r\n        // console.log(enterData)\r\n    }\r\n\r\n\r\n        // Preventing the page reloding while Submitting the Form :\r\n    const onFormSubmit = (event)=> {\r\n        event.preventDefault();\r\n    }\r\n\r\n\r\n        // Redering :\r\n    return (\r\n        <>\r\n            <h1 style = { {color : \"green\"} } >COMPLETE FORM</h1>\r\n            <h2>Hi, <span style = { {color : \"red\"} }> {fullData} </span> </h2>\r\n            <form id=\"form2\" onSubmit={onFormSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter your Name\"\r\n                    name = \"fullName\"\r\n                    onChange={enteringData}\r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Enter your Password\"\r\n                    name = \"pass\"\r\n                    onChange={enteringData}\r\n                />\r\n                <input\r\n                    type =\"submit\"\r\n                    value = \"Submit/Show\"\r\n                    onClick = {showSaveData}\r\n                />\r\n            </form>\r\n        </>\r\n    )\r\n};\r\n\r\n\r\n\r\n// Exporting Component :\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}