{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROGRAMING\\\\HTML CSS  JAVA SCRIPT\\\\5_ReactJS\\\\Practice\\\\reactapp\\\\src\\\\index.js\";\n//          USE-EFFECT HOOKS        \\\\\n\n/*\n            DEFINE USE-EFFECT HOOK :\n               By using this Hook, you tell React that your component needs to do something after render.\n                React will remember the function you passed (we’ll refer to it as our “effect”),\n                 and call it later after performing the DOM updates. In this effect,\n                  we set the document title, but we could also perform data fetching or call some other imperative API. \n               The useEffect hook is the Swiss Army knife of all the hooks. It’s the solution to many problems: how to fetch data when a component mounts,\n                how to run code when state changes or when a prop changes, how to set up timers or intervals, you name it.\n                \n                * useEffect, a very useful and potentially confusing new hook in React.\n                 useEffect can be used in place of three lifecycle methods: componentDidMount, componentDidUpdate, and componentWillUnmount.\n\n                * useEffect hook is an extremely powerful an versatile tool, allowing you to even create your own, custom hooks.\n\n */\n// Importing Required Modules :\nimport React from 'react';\nimport ReactDOM from 'react-dom'; // Importing Main Component :\n\nimport App from './App'; // Rendering :\n\nReactDOM.render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }\n})), document.getElementById('root')); //                END                 \\\\","map":{"version":3,"sources":["E:/PROGRAMING/HTML CSS  JAVA SCRIPT/5_ReactJS/Practice/reactapp/src/index.js"],"names":["React","ReactDOM","App","render","document","getElementById"],"mappings":";AAAA;;AAEA;;;;;;;;;;;;;;;AAiBA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAEA;;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CAEA;;AACAD,QAAQ,CAACE,MAAT,eACI,uDACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ,EAGSC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAHT,E,CAOgB","sourcesContent":["//          USE-EFFECT HOOKS        \\\\\n\n/*\n            DEFINE USE-EFFECT HOOK :\n               By using this Hook, you tell React that your component needs to do something after render.\n                React will remember the function you passed (we’ll refer to it as our “effect”),\n                 and call it later after performing the DOM updates. In this effect,\n                  we set the document title, but we could also perform data fetching or call some other imperative API. \n               The useEffect hook is the Swiss Army knife of all the hooks. It’s the solution to many problems: how to fetch data when a component mounts,\n                how to run code when state changes or when a prop changes, how to set up timers or intervals, you name it.\n                \n                * useEffect, a very useful and potentially confusing new hook in React.\n                 useEffect can be used in place of three lifecycle methods: componentDidMount, componentDidUpdate, and componentWillUnmount.\n\n                * useEffect hook is an extremely powerful an versatile tool, allowing you to even create your own, custom hooks.\n\n */\n\n\n// Importing Required Modules :\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Importing Main Component :\nimport App from './App';\n\n// Rendering :\nReactDOM.render(\n    <>\n        <App />\n    </>, document.getElementById('root')\n);\n\n\n                //                END                 \\\\"]},"metadata":{},"sourceType":"module"}