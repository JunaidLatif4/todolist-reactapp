{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROGRAMING\\\\HTML CSS  JAVA SCRIPT\\\\5_ReactJS\\\\Practice\\\\reactapp\\\\src\\\\index.js\";\n//          CONTEXT API WITH HOOKS        \\\\\n\n/*\n            DEFINE CONTEXT API :\n               React Context API is a way to essentially create global variables that can be passed around in a React app.\n                This is the alternative to \"prop drilling\", or passing props from grandparent to parent to child, and so on.\n                 Context is often touted as a simpler, lighter solution to using Redux for state management. \n\n                 Context With Hooks :\n                        We can use Context without Hooks as it contain three Parts :\n                            * 'CreateContext()' we have to create the Context in the main Component.\n                            * 'Provider' The provider method is use to provide the Values to the component.\n                            * 'UseContext()' The useContext State is used to access the send Data & then easily use it as a Simple Variable within the Component .\n                             \n                                //* All the Send Data process is same as which is used without Hook method ,\n                                     Only the Consumer part is different when the Sended data is going to used *\\\\\n */\n// Importing Required Modules :\nimport React from 'react';\nimport ReactDOM from 'react-dom'; // Importing Main Component :\n\nimport App from './App'; // Rendering :\n\nReactDOM.render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }\n})), document.getElementById('root')); //                END                 \\\\","map":{"version":3,"sources":["E:/PROGRAMING/HTML CSS  JAVA SCRIPT/5_ReactJS/Practice/reactapp/src/index.js"],"names":["React","ReactDOM","App","render","document","getElementById"],"mappings":";AAAA;;AAEA;;;;;;;;;;;;;;;AAiBA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAEA;;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CAEA;;AACAD,QAAQ,CAACE,MAAT,eACI,uDACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ,EAGSC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAHT,E,CAOgB","sourcesContent":["//          CONTEXT API WITH HOOKS        \\\\\n\n/*\n            DEFINE CONTEXT API :\n               React Context API is a way to essentially create global variables that can be passed around in a React app.\n                This is the alternative to \"prop drilling\", or passing props from grandparent to parent to child, and so on.\n                 Context is often touted as a simpler, lighter solution to using Redux for state management. \n\n                 Context With Hooks :\n                        We can use Context without Hooks as it contain three Parts :\n                            * 'CreateContext()' we have to create the Context in the main Component.\n                            * 'Provider' The provider method is use to provide the Values to the component.\n                            * 'UseContext()' The useContext State is used to access the send Data & then easily use it as a Simple Variable within the Component .\n                             \n                                //* All the Send Data process is same as which is used without Hook method ,\n                                     Only the Consumer part is different when the Sended data is going to used *\\\\\n */\n\n\n// Importing Required Modules :\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Importing Main Component :\nimport App from './App';\n\n// Rendering :\nReactDOM.render(\n    <>\n        <App />\n    </>, document.getElementById('root')\n);\n\n\n                //                END                 \\\\"]},"metadata":{},"sourceType":"module"}